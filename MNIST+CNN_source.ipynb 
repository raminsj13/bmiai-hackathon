{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task\n",
    "In this tutorial, we will classify the MNIST dataset using a Convolutional Neural Network (CNN)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import libraries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before anything, let's import some basic libraries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import torch\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader\n",
    "from torch.utils.data import Dataset\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Training and test set should be first loaded from the folder containing our data, as was done in the previous tutorial:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the data:\n",
    "train = pd.read_csv('data/train.csv')\n",
    "test = pd.read_csv('data/test.csv')\n",
    "\n",
    "# Split the data into features and labels for each image:\n",
    "Y_train = train[\"label\"]\n",
    "X_train = train.drop(labels=\"label\",axis=1)\n",
    "X_test = test\n",
    "\n",
    "# Normalize values:\n",
    "X_train = X_train/255.0\n",
    "test = test/255.0\n",
    "\n",
    "# Reshape the pixels to their original 28x28 format:\n",
    "X_train, Y_train = X_train.values.reshape(-1, 28,28), Y_train.values\n",
    "X_test = X_test.values.reshape(-1,28,28)\n",
    "\n",
    "# Split into training and validation:\n",
    "X_valid, Y_valid = X_train[-2000:], Y_train[-2000:]\n",
    "X_train, Y_train = X_train[:-2000], Y_train[:-2000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PyTorch provides some helper functions to load data, shuffle, and augment. Dataset and DataLoader are two of these functions.\n",
    "\n",
    "So let's create a class that is inherited from the Dataset class. This class provides functions to gather data and also to know the number of items:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MNISTDataset(Dataset):\n",
    "    def __init__(self, X, Y=None):\n",
    "        super().__init__()\n",
    "        self.X = X\n",
    "        self.Y = Y\n",
    "    \n",
    "    def __getitem__(self, index):\n",
    "        if self.Y is None:\n",
    "            return self.X[index]\n",
    "        return self.X[index], self.Y[index]\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next step will be to instantiate the dataset to then pass it to the DataLoader. By using the DataLoader, pytorch will manage for you all the shuffling management and loading (multi-threaded) of the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainset = MNISTDataset(X_train, Y_train)\n",
    "testset = MNISTDataset(X_test)\n",
    "validset = MNISTDataset(X_valid, Y_valid)\n",
    "\n",
    "# batch_size=how many samples per batch to load\n",
    "# num_workers= how many subprocesses to use for data loading\n",
    "trainloader = DataLoader(trainset, batch_size=4, shuffle=True, num_workers=2)\n",
    "testloader = DataLoader(testset, batch_size=4, shuffle=False, num_workers=2)\n",
    "validloader = DataLoader(validset, batch_size=4, shuffle=False)\n",
    "\n",
    "classes = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now pytorch will manage for you all the shuffling management and loading (multi-threaded) of your data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see some of the training samples and their labels available through trainloader:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\njySWVMsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11fd47550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label:  4\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1013bbb00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label:  9\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10e932080>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label:  5\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nSRF+ICnCDyRF+IGkCD+QFOEHkiL8QFJtf8CzYu9L+ue0258ptg2iQe1tUPuS6K1bVfZ2cad37Ov3\n+U8b3N4TEcONNVBiUHsb1L4keutWU72x2w8kRfiBpJoO//qGxy8zqL0Nal8SvXWrkd4afc8PoDlN\nz/wAGtJI+G3fZPtvtt+zfX8TPbRi+4Dtd4qVhxtdYqxYBm3S9rvTtl1ge6ftfxSXMy6T1lBvA7Fy\nc8nK0o2+doO24nXfd/ttnyXp75JukDQq6Q1JqyLiL31tpAXbByQNR0Tjx4Rtf1PSUUm/Prkaku2H\nJR2KiJ8WfzjPj4j7BqS3hzTLlZtr6q3VytJ3qsHXrsoVr6vQxMy/XNJ7EbE/Io5JekrSygb6GHgR\n8ZqkQ6dsXilpU3F9k6b+8/Rdi94GQkSMR8RbxfUjkk6uLN3oa1fSVyOaCP9Fkv417faoBmvJ75C0\nw/abtkeabmYGC0+ujFRcXthwP6dqu3JzP52ysvTAvHbdrHhdtSbCP9NqIoN0yOHrEfFVSd+R9INi\n9xad+aWkL2pqGbdxST9vspliZennJK2NiP822ct0M/TVyOvWRPhHJS2advtzksYa6GNGETFWXE5K\nekFTb1MGycTJRVKLy8mG+/m/iJiIiBMR8ZGkX6nB165YWfo5SZsj4vlic+Ov3Ux9NfW6NRH+NyQt\nsX2J7XmSvitpawN9nMb2/OKDGNmeL+lGDd7qw1slrS6ur5a0pcFePmZQVm5utbK0Gn7tBm3F60ZO\n8ikOZTwq6SxJGyLiJ31vYga2v6Cp2V6a+sbjb5rszfaTkq7V1Le+JiT9SNJvJT0j6fOSDkq6PSL6\n/sFbi96u1SxXbq6pt1YrS7+uBl+7Kle8rqQfzvADcuIMPyApwg8kRfiBpAg/kBThB5Ii/EBShB9I\nivADSf0PBuXBqbXzMfMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11949b9e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label:  1\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "for i, data in enumerate(trainloader):\n",
    "    imgs, labels = data\n",
    "    plt.figure()\n",
    "    two_d = (np.reshape(imgs[0].numpy()*255, (28, 28))).astype(np.uint8)\n",
    "    plt.imshow(two_d, cmap='gray')\n",
    "    plt.show()\n",
    "    print(\"Label: \", classes[labels[0]])\n",
    "    if i >= 3:\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Defining a CNN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Architecture of the convolutional neural network we will be using today, looks like below:\n",
    "<img src=\"MNIST.png\">\n",
    "\n",
    "First, we have a convolutional layer with 10 filters of filter size 5$*$5, stride 1 and padding 0 followed by a ReLU layer. Following, is a Maxpool layer with filter size and stride set to 2. Next, is a convolutional layer with 20 fitlers of size 5$*$5, stride 1 and padding 0 followed by a ReLU layer. After that, is a Maxpool layer with size and stride set to 2. Last, we have a Fully connected layer with 50 output neurons followed by a ReLU layer, followed by a fully connected layer with 10 output neurons."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class CNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(1, 10, 5) # stride=1, number of filters=10, filter size=5\n",
    "        self.pool = nn.MaxPool2d(2,2) # stride=2, filter size=2\n",
    "        self.conv2 = nn.Conv2d(10, 20, 5) #stride=1, number of filters=20, filter size=5 \n",
    "        self.fc1 = nn.Linear(20*4*4, 50) # fully connected layer with input size 4x4x20 and output size 50\n",
    "        self.fc2 = nn.Linear(50, 10) # fully connected layer with input size 50 and output size 10 \n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = x.unsqueeze(1)\n",
    "        x = x.float()\n",
    "        a1 = self.pool(F.relu(self.conv1(x)))\n",
    "        a2 = self.pool(F.relu(self.conv2(a1)))\n",
    "        a3 = a2.view(-1, 20*4*4)\n",
    "        a4 = F.relu(self.fc1(a3))\n",
    "        a5 = self.fc2(a4)\n",
    "        return a5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's build a model and see what it looks like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CNN(\n",
       "  (conv1): Conv2d(1, 10, kernel_size=(5, 5), stride=(1, 1))\n",
       "  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
       "  (conv2): Conv2d(10, 20, kernel_size=(5, 5), stride=(1, 1))\n",
       "  (fc1): Linear(in_features=320, out_features=50, bias=True)\n",
       "  (fc2): Linear(in_features=50, out_features=10, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cnn = CNN()\n",
    "cnn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Defining the Loss Function and the Optimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to define the loss function and optimizer we will use to train our network. For loss function, we will use the Cross Entropy loss which is available via the torch.nn package. For optimizer, we will use the Stochastic Gradient Descent which is available via torch.nn package. The learning rate used for training is set to 0.01: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "learning_rate = 0.01\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.SGD(cnn.parameters(), lr=learning_rate, momentum=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Training the Network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's define a function for training the network:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def train(model, optimizer=optimizer, criterion=criterion, learning_rate=learning_rate, epochs=5):\n",
    "    losses = []\n",
    "    for epoch in range(epochs):\n",
    "        for i, data in enumerate(trainloader):\n",
    "            samples, labels = data\n",
    "\n",
    "            # Zero the parameter gradients\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            predictions = model(samples)\n",
    "            loss = criterion(predictions, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            # Print some statistics\n",
    "            if i % 2000 == 1999:\n",
    "                losses.append(loss.data.mean())\n",
    "                print('epoch[%d], mini-batch[%5d] loss: %.3f' % (epoch+1, i+1, np.mean(losses)))\n",
    "                total_loss = 0 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can train our CNN model, \"cnn\" using the \"train\" function as below: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch[1], mini-batch[ 2000] loss: 0.090\n",
      "epoch[1], mini-batch[ 4000] loss: 0.097\n",
      "epoch[1], mini-batch[ 6000] loss: 0.065\n",
      "epoch[1], mini-batch[ 8000] loss: 0.053\n",
      "epoch[1], mini-batch[10000] loss: 0.050\n",
      "epoch[2], mini-batch[ 2000] loss: 0.042\n",
      "epoch[2], mini-batch[ 4000] loss: 0.048\n",
      "epoch[2], mini-batch[ 6000] loss: 0.042\n",
      "epoch[2], mini-batch[ 8000] loss: 0.038\n",
      "epoch[2], mini-batch[10000] loss: 0.090\n",
      "epoch[3], mini-batch[ 2000] loss: 0.082\n",
      "epoch[3], mini-batch[ 4000] loss: 0.075\n",
      "epoch[3], mini-batch[ 6000] loss: 0.070\n",
      "epoch[3], mini-batch[ 8000] loss: 0.067\n",
      "epoch[3], mini-batch[10000] loss: 0.062\n",
      "epoch[4], mini-batch[ 2000] loss: 0.059\n",
      "epoch[4], mini-batch[ 4000] loss: 0.055\n",
      "epoch[4], mini-batch[ 6000] loss: 0.052\n",
      "epoch[4], mini-batch[ 8000] loss: 0.049\n",
      "epoch[4], mini-batch[10000] loss: 0.047\n",
      "epoch[5], mini-batch[ 2000] loss: 0.045\n",
      "epoch[5], mini-batch[ 4000] loss: 0.043\n",
      "epoch[5], mini-batch[ 6000] loss: 0.041\n",
      "epoch[5], mini-batch[ 8000] loss: 0.040\n",
      "epoch[5], mini-batch[10000] loss: 0.038\n"
     ]
    }
   ],
   "source": [
    "train(cnn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tip: When you train networks for deep learning, it is often useful to monitor the training progress. By plotting metrics such as loss or accuracy during training, you can learn how the training is progressing. For example, you can determine if and how quickly the network loss is decreasing, and whether the network is starting to overfit the training data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Testing the Trained Network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the validation set, we can see the accuracy of trained CNN (cnn):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on 2000 test images is = 98 %\n"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "corrects = 0\n",
    "\n",
    "for data in validloader:\n",
    "    images, labels = data\n",
    "    outputs = cnn(images)\n",
    "    _, predicted_lables = torch.max(outputs.data, 1)\n",
    "    total += labels.size(0)\n",
    "    corrects += (predicted_lables == labels).sum().item()\n",
    "\n",
    "print('Accuracy on %d test images is = %d %%' % (total, 100*corrects/total))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at some samples in the validation set and their predicted labels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\neXNjAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1195cc860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Label: [2]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nW5L11atXJ+u1/n2heO6evjgjU89FPp9L+pm7v25mEyW9Zma9We2X7p7+vw+gkmqG390PSzqc3T5h\nZnslzWh1YwBa64ze85vZpZLmSTq1vtR9ZvY3M+sxs0k5Y7rMrM/M+prqFECh6g6/mU2QtFHST939\nuKRfS/qmpLkaPjP4xWjj3L3b3TvdvbOAfgEUpK7wm9k4DQf/t+7+R0ly90F3/8Ldv5S0TtJ1rWsT\nQNFqht+GP9b1jKS97r5mxPbpIx72fUlvFd8egFapZ6rvJkn/I2m3hqf6JOlhSUs0fMrvkvolrcj+\nOJh6LuZ9gBard6qvZviLRPiB1qs3/FzhBwRF+IGgCD8QFOEHgiL8QFCEHwiK8ANBEX4gKMIPBEX4\ngaAIPxAU4QeCIvxAUIQfCKrdS3QflfT3EfenZNuqqKq9VbUvid4aVWRv/1HvA9v6ef6v7Nysr6rf\n7VfV3qral0RvjSqrN077gaAIPxBU2eHvLnn/KVXtrap9SfTWqFJ6K/U9P4DylH3kB1CSUsJvZreb\n2T4ze8fMHiqjhzxm1m9mu83szbKXGMuWQTtiZm+N2NZhZr1mdiD7OeoyaSX1ttLM3s9euzfN7Lsl\n9TbLzF42s71m9raZ/STbXuprl+irlNet7af9ZnaOpP2SbpM0IGmXpCXuvqetjeQws35Jne5e+pyw\nmX1L0pCkZ9396mzbE5I+dvdV2S/OSe7+3xXpbaWkobJXbs4WlJk+cmVpSXdI+i+V+Nol+lqsEl63\nMo7810l6x93fc/d/Svq9pIUl9FF57r5d0senbV4oaX12e72G//G0XU5vleDuh9399ez2CUmnVpYu\n9bVL9FWKMsI/Q9KhEfcHVK0lv13SVjN7zcy6ym5mFBefWhkp+zm15H5OV3Pl5nY6bWXpyrx2jax4\nXbQywj/aaiJVmnK40d3nS/qOpB9np7eoT10rN7fLKCtLV0KjK14XrYzwD0iaNeL+TEkflNDHqNz9\ng+znEUmbVL3VhwdPLZKa/TxScj//UqWVm0dbWVoVeO2qtOJ1GeHfJWm2mX3dzMZL+oGkzSX08RVm\ndkH2hxiZ2QWSvq3qrT68WdKy7PYySS+V2Mu/qcrKzXkrS6vk165qK16XcpFPNpXxpKRzJPW4++Nt\nb2IUZvYNDR/tpeFPPP6uzN7M7HlJt2j4U1+Dkn4u6UVJf5B0iaR/SFrk7m3/w1tOb7foDFdublFv\neStL71SJr12RK14X0g9X+AExcYUfEBThB4Ii/EBQhB8IivADQRF+ICjCDwRF+IGg/h9kwBL9zchm\nUAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10e94aac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Label: [8]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10ecbcb70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Label: [0]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAP8AAAD8CAYAAAC4nHJkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAADNpJREFUeJzt3X+oXPWZx/H3Y+wFMUX8gSbGqN0i\ny6pIugQJZF2ziOIuBRWt6B9Llq2mfyhY8I8VERSWQli3des/hVRDI1ib4o81hLJtEdFdkWAi2thq\na6xJezfXxB+VKgjF5Nk/7smS6p0zN3Nn5szN836BzMx55pzzMOZzv2fmzJlvZCaS6jmh6wYkdcPw\nS0UZfqkowy8VZfilogy/VJThl4oy/FJRhl8q6sRx7iwi/DqhNGKZGfN53oJG/oi4OiJ+HRF7IuKu\nhWxL0njFoN/tj4glwG+AK4Fp4CXg5sz8Vcs6jvzSiI1j5L8U2JOZv83MPwE/Aq5ZwPYkjdFCwr8C\n+P1Rj6ebZX8mIjZExM6I2LmAfUkasoV84DfXocXnDuszcxOwCTzslybJQkb+aWDlUY/PAfYvrB1J\n47KQ8L8EXBARX4qIKeAmYNtw2pI0agMf9mfmpxFxO/BTYAmwOTN/ObTOJI3UwKf6BtqZ7/mlkRvL\nl3wkLV6GXyrK8EtFGX6pKMMvFWX4paIMv1SU4ZeKMvxSUYZfKsrwS0UZfqkowy8VZfilogy/VJTh\nl4oy/FJRhl8qyvBLRRl+qSjDLxVl+KWiDL9UlOGXijL8UlGGXyrK8EtFGX6pKMMvFTXwFN0AEbEX\n+Ag4BHyamauH0ZQWj1tvvbW1ftFFF/WsXXfdda3rnnfeeQP1pPlZUPgbf5eZ7w1hO5LGyMN+qaiF\nhj+Bn0XErojYMIyGJI3HQg/712bm/og4E/h5RLyRmc8f/YTmj4J/GKQJs6CRPzP3N7cHgaeAS+d4\nzqbMXO2HgdJkGTj8EXFyRHzxyH3gKuC1YTUmabQWcth/FvBURBzZzg8z87+G0pWkkYvMHN/OIsa3\nM43Fvn37WusrVqzoWTt06FDrurfddltr/aGHHmqtV5WZMZ/neapPKsrwS0UZfqkowy8VZfilogy/\nVNQwrurTInbHHXe01pctW9Zan5qaGnjfS5Ysaa0vXbp04G2rP0d+qSjDLxVl+KWiDL9UlOGXijL8\nUlGGXyrK8/zHuRNPbP9ffOGFF7bWb7nlltb6Qi4Jf+utt1rr27dvH3jb6s+RXyrK8EtFGX6pKMMv\nFWX4paIMv1SU4ZeK8qe7j3MrV65srb/99tut9WZehp4W8u/npptuaq0//vjjA2+7Mn+6W1Irwy8V\nZfilogy/VJThl4oy/FJRhl8qqu/1/BGxGfgqcDAzL26WnQZsBc4H9gI3ZuYfRtem2qxZs6Zn7YUX\nXmhd984772ytP/DAA631w4cPt9Y1ueYz8v8AuPozy+4CnsnMC4BnmseSFpG+4c/M54EPPrP4GmBL\nc38LcO2Q+5I0YoO+5z8rM2cAmtszh9eSpHEY+W/4RcQGYMOo9yPp2Aw68h+IiOUAze3BXk/MzE2Z\nuTozVw+4L0kjMGj4twHrm/vrgaeH046kcekb/oh4DHgR+MuImI6IrwMbgSsj4k3gyuaxpEXE6/mP\nA1NTUz1r99xzT+u655xzTmt9/fr1rfV+/3527drVs7Zu3brWdT/55JPWuubm9fySWhl+qSjDLxVl\n+KWiDL9UlOGXivJU33Gu3093P/vss631E05oHx/OPffc1vqLL77Ys3bZZZe1rqvBeKpPUivDLxVl\n+KWiDL9UlOGXijL8UlGGXypq5D/jpW6dcsoprfV9+/a11rdv395av//++1vrH374YWtd3XHkl4oy\n/FJRhl8qyvBLRRl+qSjDLxVl+KWivJ7/OLd169bW+hlnnNFa73c9f79r8teuXduztmPHjtZ1NRiv\n55fUyvBLRRl+qSjDLxVl+KWiDL9UlOGXiup7PX9EbAa+ChzMzIubZfcBtwLvNk+7OzN/Mqom1W7N\nmjU9azfccMOCtt3vPP8bb7zRWn/nnXcWtH+NznxG/h8AV8+x/IHMXNX8Z/ClRaZv+DPzeeCDMfQi\naYwW8p7/9oj4RURsjohTh9aRpLEYNPzfA74MrAJmgG/3emJEbIiInRGxc8B9SRqBgcKfmQcy81Bm\nHga+D1za8txNmbk6M1cP2qSk4Rso/BGx/KiH1wGvDacdSeMyn1N9jwHrgDMiYhq4F1gXEauABPYC\n3xhhj5JGoG/4M/PmORY/PIJeNKBVq1b1rC309xoOHz7cWr/++utb6/3mBVB3/IafVJThl4oy/FJR\nhl8qyvBLRRl+qSin6F4Errjiitb6xo0bR7bv/fv3t9bffffd1romlyO/VJThl4oy/FJRhl8qyvBL\nRRl+qSjDLxXlef5F4KSTTmqtT01NDbztLVu2tNYffPDB1rrn+RcvR36pKMMvFWX4paIMv1SU4ZeK\nMvxSUYZfKsrz/IvA9PR0a/3999/vWVu+fHnPGsDu3btb66+++mprXYuXI79UlOGXijL8UlGGXyrK\n8EtFGX6pKMMvFdX3PH9ErAQeAZYBh4FNmfndiDgN2AqcD+wFbszMP4yu1bq2bdvWWj/77LPH1ImO\nJ/MZ+T8F7szMvwLWALdFxIXAXcAzmXkB8EzzWNIi0Tf8mTmTmS839z8CXgdWANcAR34GZgtw7aia\nlDR8x/SePyLOB74C7ADOyswZmP0DAZw57OYkjc68v9sfEUuBJ4BvZuYfI2K+620ANgzWnqRRmdfI\nHxFfYDb4j2bmk83iAxGxvKkvBw7OtW5mbsrM1Zm5ehgNSxqOvuGP2SH+YeD1zPzOUaVtwPrm/nrg\n6eG3J2lU5nPYvxb4R2B3RLzSLLsb2Aj8OCK+DvwO+NpoWjz+XX755a315557rrV+1VVX9aydfvrp\nA/Wk41/f8Gfm/wC93uC3TxwvaWL5DT+pKMMvFWX4paIMv1SU4ZeKMvxSUf509wTodx7/448/bq1f\ncsklPWtLly5tXXdmZqa1ruOXI79UlOGXijL8UlGGXyrK8EtFGX6pKMMvFeV5/kVg2bJlrfWpqame\ntTfffLN13a1btw7UkxY/R36pKMMvFWX4paIMv1SU4ZeKMvxSUYZfKioyc3w7ixjfzgp59NFHe9bu\nvffe1nX37Nkz7HbUscyc11x6jvxSUYZfKsrwS0UZfqkowy8VZfilogy/VFTf8/wRsRJ4BFgGHAY2\nZeZ3I+I+4Fbg3eapd2fmT/psy/P80ojN9zz/fMK/HFiemS9HxBeBXcC1wI3Ax5n57/NtyvBLozff\n8Pf9JZ/MnAFmmvsfRcTrwIqFtSepa8f0nj8izge+AuxoFt0eEb+IiM0RcWqPdTZExM6I2LmgTiUN\n1by/2x8RS4HngG9l5pMRcRbwHpDAvzL71uCf+2zDw35pxIb2nh8gIr4AbAd+mpnfmaN+PrA9My/u\nsx3DL43Y0C7siYgAHgZePzr4zQeBR1wHvHasTUrqznw+7f8b4L+B3cye6gO4G7gZWMXsYf9e4BvN\nh4Nt23Lkl0ZsqIf9w2L4pdHzen5JrQy/VJThl4oy/FJRhl8qyvBLRRl+qSjDLxVl+KWiDL9UlOGX\nijL8UlGGXyrK8EtF9f0BzyF7D9h31OMzmmWTaFJ7m9S+wN4GNczezpvvE8d6Pf/ndh6xMzNXd9ZA\ni0ntbVL7AnsbVFe9edgvFWX4paK6Dv+mjvffZlJ7m9S+wN4G1Ulvnb7nl9Sdrkd+SR3pJPwRcXVE\n/Doi9kTEXV300EtE7I2I3RHxStdTjDXToB2MiNeOWnZaRPw8It5sbuecJq2j3u6LiP9tXrtXIuIf\nOuptZUQ8GxGvR8QvI+KOZnmnr11LX528bmM/7I+IJcBvgCuBaeAl4ObM/NVYG+khIvYCqzOz83PC\nEfG3wMfAI0dmQ4qIfwM+yMyNzR/OUzPzXyakt/s4xpmbR9Rbr5ml/4kOX7thzng9DF2M/JcCezLz\nt5n5J+BHwDUd9DHxMvN54IPPLL4G2NLc38LsP56x69HbRMjMmcx8ubn/EXBkZulOX7uWvjrRRfhX\nAL8/6vE0kzXldwI/i4hdEbGh62bmcNaRmZGa2zM77uez+s7cPE6fmVl6Yl67QWa8HrYuwj/XbCKT\ndMphbWb+NfD3wG3N4a3m53vAl5mdxm0G+HaXzTQzSz8BfDMz/9hlL0ebo69OXrcuwj8NrDzq8TnA\n/g76mFNm7m9uDwJPMfs2ZZIcODJJanN7sON+/l9mHsjMQ5l5GPg+Hb52zczSTwCPZuaTzeLOX7u5\n+urqdesi/C8BF0TElyJiCrgJ2NZBH58TESc3H8QQEScDVzF5sw9vA9Y399cDT3fYy5+ZlJmbe80s\nTcev3aTNeN3Jl3yaUxn/ASwBNmfmt8bexBwi4i+YHe1h9orHH3bZW0Q8Bqxj9qqvA8C9wH8CPwbO\nBX4HfC0zx/7BW4/e1nGMMzePqLdeM0vvoMPXbpgzXg+lH7/hJ9XkN/ykogy/VJThl4oy/FJRhl8q\nyvBLRRl+qSjDLxX1f1WJzRjWbJ6nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11fe64860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Label: [1]\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "for i, data in enumerate(validloader):\n",
    "    imgs, labels = data\n",
    "    plt.figure()\n",
    "    two_d = (np.reshape(imgs[0].numpy()*255, (28, 28))).astype(np.uint8)\n",
    "    plt.imshow(two_d, cmap='gray')\n",
    "    plt.show()\n",
    "    outputs = cnn(imgs)\n",
    "    _, predicted_label = torch.topk(outputs[0], 1)\n",
    "    print('Predicted Label:', predicted_label.numpy())\n",
    "    if i >= 3:\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coding:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are other optimizer algorithms available in torch.nn package that sometimes work better than Stochastic Gradient Descent (SGD). One of these optimizers is called Adam Optimizer (Adam). Let's know train the network using the Adam optimizer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the Adam optimizer:\n",
    "Adam_optimizer = optim.Adam(cnn.parameters(), lr=learning_rate)\n",
    "\n",
    "# Create a new instance of CNN network to train:\n",
    "# -- Your code goes here --\n",
    "\n",
    "# Train the network using the Adam optimizer:\n",
    "#-- Your code goes here --"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having done these, let's see the accuracy of the trained network on the validation set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#-- Your code goes here --"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
